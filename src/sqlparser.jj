options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(sqlparser)

import java.util.ArrayList;

public class sqlparser
{
  // define static variable
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC_TABLE = 3;
  public static final int PRINT_INSERT_TABLE = 4;
  public static final int PRINT_DELETE_TABLE = 5;
  public static final int PRINT_SELECT_TABLE = 6;
  public static final int PRINT_SHOW_TABLE = 7;
  
  public static void handleQuery(Query q) throws Exception, MyException
  {
    q.execute();
    System.out.print("DB_2009-13389> ");
  }
}

PARSER_END(sqlparser)

SKIP : {
  "\r" | "\t" | "\n" | < SPACE: " " >
}

// add tokens for SQL special keywords like as, from, or ...
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < INSERT_INTO : "insert into" >
| < DESC : "desc" >
| < DELETE_FROM: "delete from" >
| < SELECT: "select" >
| < SHOW_TABLES: "show tables" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE: "where" >
| < AND: "and" >
| < OR: "or" >
| < NOT: "not" >
| < IS: "is" >
| < STAR : "*" >
| < NULL : "null" >
// specify single letters to avoid char includes them
| < CREATE : "create" >
| < TABLE: "table" >
| < DROP : "drop" >
| < SHOW : "show" >
| < TABLES : "tables" >
| < INSERT : "insert" >
| < INTO : "into" >
| < DELETE : "delete" >
| < PRIMARY: "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >

}

// add tokens following assignment requirement
// in NON_QUOTE_SPECIAL_CHARS,
// only the special characters appearing in MACBOOK PRO except ' are dealt with
// ~`!@#$%^&*()_+-= { }|[]\:;< >?,./

TOKEN :
{
  < SEMICOLON : ";" >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < COMP_OP : ">" | "<" | "=" | ">=" | "<=" | "!=" >
| < SIGN : "+" | "-" >
| < PERIOD: "." >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < DIGIT : [ "0"-"9" ] >
| < CHAR_STRING : < QUOTE >(< NON_QUOTE_CHARS >)*< QUOTE >> 
| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN > >
| < NNNN  : < DIGIT><DIGIT ><DIGIT ><DIGIT > > 
| < NN  : <DIGIT ><DIGIT > >
| < QUOTE: "\'" >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < NON_QUOTE_CHARS: < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARS > | < SPACE > >
| < NON_QUOTE_SPECIAL_CHARS: [ "~","`","!","@","#","$","%","^","&","*", "(",")","-","_","+","=","{","}","[", "]", "\\", "|",":", ";", ",", "<", ">" ,".","?","/"] >  

}

void command() throws Exception, MyException:
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
		DBManager dbman = DBManager.dbman();
		dbman.close();
      System.exit(0);
    }
  ) 
}

void queryList() throws Exception, MyException:
{
    Query q;
}
{
  (
    q = query()
    < SEMICOLON>
    {
      if(q != null) { 
      	handleQuery(q);
     }else {
		System.out.println("Unsupported Query");
		System.out.printf("DB_2009-13389> ");
     }
    }
  )+
}


// query is createtable||droptable||desc||insert||delete||select||showtable query
Query query() throws Exception, MyException:
{
  Query q;
} 
{
  
	 (	   q = createTableQuery()
	   {
	     return q;
	   }
	 )
 |  (	
	 q = dropTableQuery()
	 {
		return q;
	 }
	)
 |
    ( 
     q= descQuery()
     {
       return q;
     }
  )
| 
   (      
     q = insertQuery()
     {
       return q;
     }
  )
 |
   (
     q = deleteQuery()
     {
       return q;
     }
  )
|  
   (
     q = selectQuery()
     {
       return q;
     }
  	)
| 
    (
     
     q = showTableQuery()
     {
       return q;
     }
	)
}

CreateTableQuery createTableQuery() throws Exception, MyException:
{
  String name;
  CreateTableQuery query;
}
{
  < CREATE_TABLE >
  name = tableName()
  {
    query = new CreateTableQuery(name);
  }
  tableElementList(query)
  {
	return query;
  }
}

Query dropTableQuery() :
{
  String t;
}
{
  < DROP_TABLE >
  t = tableName()
  {
	DropTableQuery query = new DropTableQuery(t);
	return query;
  }
}

DescQuery descQuery() throws MyException, Exception:
{
  String t;
}
{
  < DESC >
  t = tableName()
  {
    DescQuery query = new DescQuery(t);
    {
      return query;
    }
  }
}

void tableElementList(CreateTableQuery q) throws MyException:
{}
{
  < LEFT_PAREN >
  tableElement(q)
  (
    < COMMA >
    tableElement(q)
  )*
  < RIGHT_PAREN >
}

void tableElement(CreateTableQuery q) throws MyException:
{
}
{
  columnDefinition(q)
| tableConstraintDefinition(q)

}

void columnDefinition(CreateTableQuery q) throws MyException:
{
  boolean notnull = false;
  String colname;
  DataType type;
}
{
  colname = columnName()
  type = dataType()
  (
    < NOT_NULL >
    {
      notnull = true;
    }
  )?
  {
    q.addColumn(new Column(colname, type, notnull));
  }
}

void tableConstraintDefinition(CreateTableQuery q) throws MyException:
{
  PrimaryKeyConstraint a;
  ReferentialConstraint b;
}
{
  (	    a = primaryKeyConstraint()
	  {
	    q.addPrimaryKeyConst(a);
	  }
  )
| (
  b = referentialConstraint()
	{
  		q.addReferentialKeyConst(b);
	}
)
}

PrimaryKeyConstraint primaryKeyConstraint() throws MyException :
{
 	ArrayList<String > list;
}
{
  < PRIMARY_KEY >
  list = columnNameList()
  {
    return new PrimaryKeyConstraint(list);
  }
}

ReferentialConstraint referentialConstraint() throws MyException:
{
  ArrayList<String > list;
  ArrayList<String > namelist;
  String colname;
}
{
  < FOREIGN_KEY >
  list = columnNameList()
  < REFERENCES >
  colname = tableName()
  namelist = columnNameList()
  {
	return new ReferentialConstraint(list, colname, namelist);
  }
}

ArrayList<String > columnNameList() :
{
  ArrayList<String > list = new ArrayList<String >();
  String s;
 }
{
  < LEFT_PAREN >
  s = columnName()
  {
    list.add(s);
  }
  (
    < COMMA >
    s = columnName()
    {
    	list.add(s);
  	}
  )*
  < RIGHT_PAREN >
  {
    return list;
  }
}

DataType dataType() throws MyException:
{
  Token length;
  DataType type;
}
{

  	(	  	  (    		    < INT >
			{
				type = new DataType(0);
			}
		)
	| (
	    < CHAR >
	    < LEFT_PAREN >
	    length = < INT_VALUE >
	    < RIGHT_PAREN >
	    {
	     type = new DataType(1, (Integer.parseInt(length.toString())));
	    }
	  )
	| (
	  	< DATE >
		{
		  type = new DataType(2);
		}
	  )
	)
  {
	return type;
  }
}

String tableName() :
{
  Token t; 
}
{
  t = < LEGAL_IDENTIFIER >
  {
    return t.toString().toLowerCase();
  }
}

String columnName() :
{
  Token t;
}
{
  t = < LEGAL_IDENTIFIER >
  {
	return t.toString().toLowerCase();
  }
}

// insert query consists of <INSERT_INTO > + tableName() + insertColumnsandSources()
InsertQuery insertQuery() throws MyException :
{
  String name;
  InsertQuery query;
  ArrayList<String > colNameList;
 }
{
	< INSERT_INTO >
	name = tableName()
	query = insertColumnsandSources(name)
	{
		return query;
	}

}

// insertColumnsandSources consists of [columnNameList()]? + valueList()
InsertQuery insertColumnsandSources(String name) throws MyException :
{
 	InsertQuery q;
	ArrayList<String > c = new ArrayList<String > ();
	ArrayList<Value > v;	
}
{
	(
	  c = columnNameList()
	)?
	v = valueList()
	{
	  if(c.size() == 0) {
	    q = new InsertQuery(name, v);
	  }else {
	    q = new InsertQuery(name, c, v);
	  }
	  return q;
	}
}

//valueList() consists of <VALUES > + ( + value + [< COMMA >, value()]? + )
ArrayList<Value > valueList():
{
  ArrayList<Value > valList = new ArrayList<Value > ();
  Value a;
}
{
	< VALUES >
	< LEFT_PAREN >
	a = value()
	{
	  valList.add(a);
	}
	(
	  < COMMA >
	  a = value()
	  { 
	  	valList.add(a);
	  }
	)*
	< RIGHT_PAREN >
	{
		return valList;
	}
}

//define comparable value
Value comparableValue():
{
  Token t;
  Value a;
}
{
  (
	  	(	  	  t = <INT_VALUE >
	  	  {
	  	    a = new Value(0, t.toString());
	  	  }
	  	)
		|
		(		  t = < CHAR_STRING >
		  {
	
		    String s= t.toString();
		    a = new Value(1, s.substring(1, s.length()-1));
		  }
		)
		|
		(		  t = < DATE_VALUE >
		  {
		    a = new Value(2,t.toString());
		  }
		)
	)
	{
	  return a;
	}
}

//values are null or comparable value
Value value():
{
  Value a;
}
{
	(	  (	  <NULL>
		  {
		    a = new Value(3);
		  }
	   )
		|
		(		  a = comparableValue()
		)
	)
	{
	  return a;
	}
}

//select query consists of <SELECT > + selectList() + tableExpr()
Query selectQuery() :
{}
{
	< SELECT >
	selectList()
	tableExpr() { 
		return null;
	}
	
}

//select list consists of <STAR > | selectedColumn() + [<COMMA >,selectedColumn()]*	
void selectList() :
{}
{
	< STAR >
	|
	selectedColumn()
	(
	  < COMMA >
	  selectedColumn()
	)*
}

// use LOOKAHEAD to avoid TOKEN ambiguity
// selectedColumn = (tableName+< PERIOD >)? + columnName() + (< AS >columnName)?
void selectedColumn() :
{}
{
	(
  	  LOOKAHEAD(2)
	  tableName()
	  < PERIOD >
	)?
	columnName()
	(
	  < AS >
	  columnName()
	)?
}

// tableExpr = fromClause + (whereClause)?
void tableExpr():
{}
{
	fromClause()
	(
	  whereClause()
	)?
}

// fromClause = < FROM > + tableReflist()
void fromClause():
{}
{	
	< FROM >
	tableReferenceList()
}

// tableReflist() = referedTable + (< COMMA > + referedTable )*
void tableReferenceList():
{}
{
	referedTable()
	(
	  < COMMA >
	  referedTable()
	)*
}

// referedTable() = tableName + (< AS >tableName)?
void referedTable():
{}
{
	tableName()
	(
	  < AS >
	  tableName()
	)?
}

// whereclause consists of <WHERE > + boolValueexpr
BooleanValueExpr whereClause():
{
  BooleanValueExpr e;
 }
{
	< WHERE >
	e =booleanValueExpr()
	{
		return e;
	}
}

//boolValueexpr = booleanTerm | booleanTerm <OR > booleanValueExpr
//Same as boolValueExpr = booleanTerm + (< OR > booleanTerm)*
//disassembling recursive term 
BooleanValueExpr booleanValueExpr():
{
  BooleanValueExpr e = new BooleanValueExpr();
  BooleanTerm t;
}
{
	t = booleanTerm()
	{
		e.addToList(t);
	}
	(
	  < OR >
	  t = booleanTerm()
	{
		e.addToList(t);
	}
	)*
	{
		return e;
	}
}

//booleanTerm = booleanfactor | booleanfactor <AND > booleanterm
//Same as booleanTerm = booleanfactor + (<AND> booleanfactor)*
//disassembling recursive term 
BooleanTerm booleanTerm():
{
  BooleanTerm term = new BooleanTerm() { };
  BooleanFactor f;
 }
{
	f = booleanFactor()
	{
		term.addToList(f);
	}
	(
	  < AND >
	  	f = booleanFactor()
		{
			term.addToList(f);
		}
	)*
	{
		return term;
	} 
}

//booleanfactor = (< NOT >)? + booleanTest;
BooleanFactor booleanFactor():
{
  BooleanTest t;
  BooleanFactor f;
  boolean not = false;
}
{
	(
	   < NOT >
	   {
	     not = true;
	   }
	)?
	t = booleanTest()
	{
	  f = new BooleanFactor(t);
	  if(not)
		f.setnot();
	  return f;
	}
}

// booleantest = predicate | parenthesizedBoolexpr
BooleanTest booleanTest():
{
 	Predicate p; 
}
{
	p = predicate()
	{
		return new BooleanTest(p);
	}
	| parenthesizedBoolExpr() 
}

// parenthesizedBoolexpr = ( + booleanvalueExpr + )
BooleanValueExpr parenthesizedBoolExpr():
{
  BooleanValueExpr e;
}
{
	< LEFT_PAREN >
	e = booleanValueExpr()
	< RIGHT_PAREN >
	{
	  return e;
	}
}

// use lookahead to prevent TOKEN ambiguity
// predicate = comparison Predicate | null Predicate
Predicate predicate() :
{
  ComparisonPredicate c;
  NullPredicate n;
  Predicate p;
}
{
	 (	    
	  	LOOKAHEAD(4)
	  	(
			c = comparisonPredicate()
			{
				p = new Predicate(c);
			}
		)
		| (
		  n = nullPredicate()
		  {
				p = new Predicate(n);
		  }
		)
	)
	{
		return p;
	}
}

// comparison Predicate = comparion Operand + < COMP_OP > + comparison Operand
ComparisonPredicate comparisonPredicate():
{
  CompOperand a;
  CompOperand b;
  Token t;
  String op;
}
{
	a = compOperand()
	t = < COMP_OP >
	{
		op = t.toString();	
	}
	b = compOperand()
	{
		return new ComparisonPredicate(a, b, op);
	}
}

// comparison Operand is comparable value | ( (tableName() + < PERIOD >)? columnName)
// use lookahead for same reason to above
CompOperand compOperand():
{
  String tn="";
  String cn;
  CompOperand c;
  Value v = null;
  ColAlias a = null;
  boolean isdotted = false;
 }
{
	  (	    
	  (
	 	 v = comparableValue()
		{
		  c = new CompOperand(v);
		}
	 )
	| (
			(
			  LOOKAHEAD(2)
			  tn = tableName()
			  < PERIOD >
			  {
			    isdotted = true;
			  }
		 	)?
		 	cn = columnName()
		 	{
		 	  if(isdotted) {
		 	  	a = new ColAlias(tn, cn);
		 	 }else {
				a = new ColAlias(cn);
		 	 }
		 	 c = new CompOperand(a); 
		 	}
	  )
	)
	{
	  
	return c;
}
}

// null predicate = ( tableName()< PERIOD >)? + columnName() + nullOperation()
NullPredicate nullPredicate():
{
  String tn = "";
  String cn;
  boolean dotted=false;
  boolean t;
  NullPredicate n;
  ColAlias ca;
}
{
  (
    LOOKAHEAD(2)
	tn = tableName()
	< PERIOD >
	{
	  dotted = true;
	}
  )?
  cn = columnName() 
  t = nullOperation()
  {
    if(dotted) {
		ca = new ColAlias(tn, cn);
    }else {
		ca = new ColAlias(cn);
    }
 	return new NullPredicate(t, ca);   
  }
}

// null operation consists of <IS > + (< NOT >)? + < NULL >
boolean nullOperation():
{
  boolean t =true;
}
{
	< IS >
	(	  	(
		  < NULL >
		)|
		(
		  < NOT_NULL >
		  {
		    t = false;
		  }		)
	)
	{
		return t;
	}
}



// deletequery = < DELETE_FROM > + tableName() + whereclause(optional)
DeleteQuery deleteQuery() :
{
  String tn;
  BooleanValueExpr br = null;
  boolean flag  = false;
}
{
  < DELETE_FROM >
  tn = tableName()
  (
    br = whereClause()
	{
		flag = true;
	}
  )?
  {
    if(flag) {
		return new DeleteQuery(tn, br);
    }else {
      return new DeleteQuery(tn);
    }
  }
}

// show table query is just <SHOW TABLES >
ShowTableQuery showTableQuery() throws Exception, MyException:
{
  ShowTableQuery query;
 }
{
  < SHOW_TABLES >
  {
    query = new ShowTableQuery();
    return query;
  }
}
