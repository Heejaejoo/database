options
{
  static = true;
  DEBUG_PARSER = false;
  IGNORE_CASE = true;
}

PARSER_BEGIN(sqlparser)

import java.util.ArrayList;

public class sqlparser
{
  // define static variable
  public static final int PRINT_SYNTAX_ERROR = 0;
  public static final int PRINT_CREATE_TABLE = 1;
  public static final int PRINT_DROP_TABLE = 2;
  public static final int PRINT_DESC_TABLE = 3;
  public static final int PRINT_INSERT_TABLE = 4;
  public static final int PRINT_DELETE_TABLE = 5;
  public static final int PRINT_SELECT_TABLE = 6;
  public static final int PRINT_SHOW_TABLE = 7;
  
  public static void handleQuery(Query q) throws Exception, MyException
  {
    q.execute();
    System.out.print("DB_2009-13389> ");
  }
}

PARSER_END(sqlparser)

SKIP : {
  "\r" | "\t" | "\n" | < SPACE: " " >
}

// add tokens for SQL special keywords like as, from, or ...
TOKEN : /* Keywords */
{
  < EXIT : "exit" >
| < INT : "int" >
| < CHAR : "char" >
| < DATE : "date" >
| < CREATE_TABLE : "create table" >
| < DROP_TABLE : "drop table" >
| < INSERT_INTO : "insert into" >
| < DESC : "desc" >
| < DELETE_FROM: "delete from" >
| < SELECT: "select" >
| < SHOW_TABLES: "show tables" >
| < NOT_NULL : "not null" >
| < PRIMARY_KEY : "primary key" >
| < FOREIGN_KEY : "foreign key" >
| < REFERENCES : "references" >
| < VALUES : "values" >
| < AS : "as" >
| < FROM : "from" >
| < WHERE: "where" >
| < AND: "and" >
| < OR: "or" >
| < NOT: "not" >
| < IS: "is" >
| < STAR : "*" >
| < NULL : "null" >
// specify single letters to avoid char includes them
| < CREATE : "create" >
| < TABLE: "table" >
| < DROP : "drop" >
| < SHOW : "show" >
| < TABLES : "tables" >
| < INSERT : "insert" >
| < INTO : "into" >
| < DELETE : "delete" >
| < PRIMARY: "primary" >
| < FOREIGN : "foreign" >
| < KEY : "key" >

}

// add tokens following assignment requirement
// in NON_QUOTE_SPECIAL_CHARS,
// only the special characters appearing in MACBOOK PRO except ' are dealt with
// ~`!@#$%^&*()_+-= { }|[]\:;< >?,./

TOKEN :
{
  < SEMICOLON : ";" >
| < LEGAL_IDENTIFIER : < ALPHABET > (< ALPHABET > | < UNDERSCORE >)* >
| < LEFT_PAREN : "(" >
| < RIGHT_PAREN : ")" >
| < COMMA : "," >
| < UNDERSCORE : "_" >
| < COMP_OP : ">" | "<" | "=" | ">=" | "<=" | "!=" >
| < SIGN : "+" | "-" >
| < PERIOD: "." >
| < INT_VALUE : (< SIGN >)? (< DIGIT >)+>
| < DIGIT : [ "0"-"9" ] >
| < CHAR_STRING : < QUOTE >(< NON_QUOTE_CHARS >)*< QUOTE >> 
| < DATE_VALUE : < NNNN >"-"< NN >"-"< NN > >
| < NNNN  : < DIGIT><DIGIT ><DIGIT ><DIGIT > > 
| < NN  : <DIGIT ><DIGIT > >
| < QUOTE: "\'" >
| < ALPHABET : [ "A"-"Z", "a"-"z" ] >
| < NON_QUOTE_CHARS: < DIGIT > | < ALPHABET > | < NON_QUOTE_SPECIAL_CHARS > | < SPACE > >
| < NON_QUOTE_SPECIAL_CHARS: [ "~","`","!","@","#","$","%","^","&","*", "(",")","-","_","+","=","{","}","[", "]", "\\", "|",":", ";", ",", "<", ">" ,".","?","/"] >  

}

void command() throws Exception, MyException:
{}
{
  queryList()
| (
    < EXIT >
    < SEMICOLON >
    {
      
      System.exit(0);
    }
  ) 
}

void queryList() throws Exception, MyException:
{
    Query q;
}
{
  (
    q = query()
    < SEMICOLON>
    {
      if(q != null) { 
      	handleQuery(q);
     }
    }
  )+
}


// query is createtable||droptable||desc||insert||delete||select||showtable query
Query query() throws Exception, MyException:
{
  Query q;
} 
{
  
	 (	   q = createTableQuery()
	   {
	     return q;
	   }
	 )
 |  (	
	 q = dropTableQuery()
	 {
		return q;
	 }
	)
 |
    ( 
     q= descQuery()
     {
       return q;
     }
  )
| 
   (      
     q = insertQuery()
     {
       return q;
     }
  )
 |
   (
     q = deleteQuery()
     {
       return q;
     }
  )
|  
   (
     q = selectQuery()
     {
       return q;
     }
  	)
| 
    (
     
     q = showTableQuery()
     {
       return q;
     }
	)
}

CreateTableQuery createTableQuery() throws Exception, MyException:
{
  String name;
  CreateTableQuery query;
}
{
  < CREATE_TABLE >
  name = tableName()
  {
    query = new CreateTableQuery(name);
  }
  tableElementList(query)
  {
	return query;
  }
}

Query dropTableQuery() :
{}
{
  < DROP_TABLE >
  tableName()
  {
	return null;
  }
}

DescQuery descQuery() throws MyException, Exception:
{
  String t;
}
{
  < DESC >
  t = tableName()
  {
    DescQuery query = new DescQuery(t);
    {
      return query;
    }
  }
}

void tableElementList(CreateTableQuery q) throws MyException:
{}
{
  < LEFT_PAREN >
  tableElement(q)
  (
    < COMMA >
    tableElement(q)
  )*
  < RIGHT_PAREN >
}

void tableElement(CreateTableQuery q) throws MyException:
{
}
{
  columnDefinition(q)
| tableConstraintDefinition(q)

}

void columnDefinition(CreateTableQuery q) throws MyException:
{
  boolean notnull = false;
  String colname;
  DataType type;
}
{
  colname = columnName()
  type = dataType()
  (
    < NOT_NULL >
    {
      notnull = true;
    }
  )?
  {
    q.addColumn(new Column(colname, type, notnull));
  }
}

void tableConstraintDefinition(CreateTableQuery q) throws MyException:
{
  PrimaryKeyConstraint a;
  ReferentialConstraint b;
}
{
  (	    a = primaryKeyConstraint()
	  {
	    q.addPrimaryKeyConst(a);
	  }
  )
| (
  b = referentialConstraint()
	{
  		q.addReferentialKeyConst(b);
	}
)
}

PrimaryKeyConstraint primaryKeyConstraint() throws MyException :
{
 	ArrayList<String > list;
}
{
  < PRIMARY_KEY >
  list = columnNameList()
  {
    return new PrimaryKeyConstraint(list);
  }
}

ReferentialConstraint referentialConstraint() throws MyException:
{
  ArrayList<String > list;
  ArrayList<String > namelist;
  String colname;
}
{
  < FOREIGN_KEY >
  list = columnNameList()
  < REFERENCES >
  colname = tableName()
  namelist = columnNameList()
  {
	return new ReferentialConstraint(list, colname, namelist);
  }
}

ArrayList<String > columnNameList() :
{
  ArrayList<String > list = new ArrayList<String >();
  String s;
 }
{
  < LEFT_PAREN >
  s = columnName()
  {
    list.add(s);
  }
  (
    < COMMA >
    s = columnName()
    {
    	list.add(s);
  	}
  )*
  < RIGHT_PAREN >
  {
    return list;
  }
}

DataType dataType() throws MyException:
{
  Token length;
  DataType type;
}
{

  	(	  	  (    		    < INT >
			{
				type = new DataType(0);
			}
		)
	| (
	    < CHAR >
	    < LEFT_PAREN >
	    length = < INT_VALUE >
	    < RIGHT_PAREN >
	    {
	     type = new DataType(1, (Integer.parseInt(length.toString())));
	    }
	  )
	| (
	  	< DATE >
		{
		  type = new DataType(2);
		}
	  )
	)
  {
	return type;
  }
}

String tableName() :
{
  Token t; 
}
{
  t = < LEGAL_IDENTIFIER >
  {
    return t.toString();
  }
}

String columnName() :
{
  Token t;
}
{
  t = < LEGAL_IDENTIFIER >
  {
	return t.toString();
  }
}

// insert query consists of <INSERT_INTO > + tableName() + insertColumnsandSources()
Query insertQuery() :
{}
{
	< INSERT_INTO >
	tableName()
	insertColumnsandSources()
	{
		return null;
	}

}

// insertColumnsandSources consists of [columnNameList()]? + valueList()
void insertColumnsandSources() :
{}
{
	(
	  columnNameList()
	)?
	valueList()
}

//valueList() consists of <VALUES > + ( + value + [< COMMA >, value()]? + )
void valueList():
{}
{
	< VALUES >
	< LEFT_PAREN >
	value()
	(
	  < COMMA >
	  value()
	)*
	< RIGHT_PAREN >
}

//define comparable value
void comparableValue():
{}
{
  	<INT_VALUE >
	| < CHAR_STRING >
	| < DATE_VALUE >
}

//values are null or comparable value
void value():
{}
{
	<NULL>
	| comparableValue() 	
}

//select query consists of <SELECT > + selectList() + tableExpr()
Query selectQuery() :
{}
{
	< SELECT >
	selectList()
	tableExpr() { 
		return null;
	}
	
}

//select list consists of <STAR > | selectedColumn() + [<COMMA >,selectedColumn()]*	
void selectList() :
{}
{
	< STAR >
	|
	selectedColumn()
	(
	  < COMMA >
	  selectedColumn()
	)*
}

// use LOOKAHEAD to avoid TOKEN ambiguity
// selectedColumn = (tableName+< PERIOD >)? + columnName() + (< AS >columnName)?
void selectedColumn() :
{}
{
	(
  	  LOOKAHEAD(2)
	  tableName()
	  < PERIOD >
	)?
	columnName()
	(
	  < AS >
	  columnName()
	)?
}

// tableExpr = fromClause + (whereClause)?
void tableExpr():
{}
{
	fromClause()
	(
	  whereClause()
	)?
}

// fromClause = < FROM > + tableReflist()
void fromClause():
{}
{	
	< FROM >
	tableReferenceList()
}

// tableReflist() = referedTable + (< COMMA > + referedTable )*
void tableReferenceList():
{}
{
	referedTable()
	(
	  < COMMA >
	  referedTable()
	)*
}

// referedTable() = tableName + (< AS >tableName)?
void referedTable():
{}
{
	tableName()
	(
	  < AS >
	  tableName()
	)?
}

// whereclause consists of <WHERE > + boolValueexpr
void whereClause():
{}
{
	< WHERE >
	booleanValueExpr()
}

//boolValueexpr = booleanTerm | booleanTerm <OR > booleanValueExpr
//Same as boolValueExpr = booleanTerm + (< OR > booleanTerm)*
//disassembling recursive term 
void booleanValueExpr():
{}
{
	booleanTerm()
	(
	  < OR >
	  booleanTerm()
	)*
}

//booleanTerm = booleanfactor | booleanfactor <AND > booleanterm
//Same as booleanTerm = booleanfactor + (<AND> booleanfactor)*
//disassembling recursive term 
void booleanTerm():
{}
{
	booleanFactor()
	(
	  < AND >
	  booleanFactor()
	)*	 
}

//booleanfactor = (< NOT >)? + booleanTest;
void booleanFactor():
{}
{
	(
	  < NOT >
	)?
	booleanTest()
}

// booleantest = predicate | parenthesizedBoolexpr
void booleanTest():
{}
{
	predicate()
	| parenthesizedBoolExpr() 
}

// parenthesizedBoolexpr = ( + booleanvalueExpr + )
void parenthesizedBoolExpr():
{}
{
	< LEFT_PAREN >
	booleanValueExpr()
	< RIGHT_PAREN >
}

// use lookahead to prevent TOKEN ambiguity
// predicate = comparison Predicate | null Predicate
void predicate() :
{}
{
  	LOOKAHEAD(2)
	comparisonPredicate()
	| nullPredicate()
}

// comparison Predicate = comparion Operand + < COMP_OP > + comparison Operand
void comparisonPredicate():
{}
{
	compOperand()
	< COMP_OP >
	compOperand()
}

// comparison Operand is comparable value | ( (tableName() + < PERIOD >)? columnName)
// use lookahead for same reason to above
void compOperand():
{}
{
  comparableValue()
| (
		(
		  LOOKAHEAD(2)
		  tableName()
		  < PERIOD >
	 	)?
	 	columnName()
  )
}

// null predicate = ( tableName()< PERIOD >)? + columnName() + nullOperation()
void nullPredicate():
{}
{
  (
    LOOKAHEAD(2)
	tableName()
	< PERIOD >
  )?
  columnName()
  nullOperation()
}

// null operation consists of <IS > + (< NOT >)? + < NULL >
void nullOperation():
{}
{
	< IS >
	(
	  < NOT >
	)?
	< NULL >
}

// deletequery = < DELETE_FROM > + tableName() + whereclause(optional)
Query deleteQuery() :
{}
{
  < DELETE_FROM >
  tableName()
  (
    whereClause()
  )?
  {
	return null;
  }
}

// show table query is just <SHOW TABLES >
ShowTableQuery showTableQuery() throws Exception:
{
  ShowTableQuery query;
 }
{
  < SHOW_TABLES >
  {
    query = new ShowTableQuery();
    return query;
  }
}
